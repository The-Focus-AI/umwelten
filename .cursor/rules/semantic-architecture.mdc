---
alwaysApply: true
description: Semantic architecture and naming conventions for the umwelten codebase
---

# Semantic Architecture & Naming Conventions

## Philosophical Foundation
The umwelten project implements the "Umwelt" concept - creating a semantic framework around how models perceive and interact with their environment. This represents a shift from generic terms to semantically meaningful concepts that better reflect the cognitive processes involved.

## Core Semantic Concepts

### 1. Cognition (`src/cognition/`)
**Definition**: The reasoning and thinking processes (formerly "models")
**Purpose**: Represents the cognitive capabilities and mental processes of AI models

**Key Components**:
- [src/cognition/models.ts](mdc:src/cognition/models.ts): Model interfaces and type definitions
- [src/cognition/runner.ts](mdc:src/cognition/runner.ts): Base model runner for cognitive execution
- [src/cognition/smart_runner.ts](mdc:src/cognition/smart_runner.ts): Hookable runner with cognitive enhancements
- [src/cognition/types.ts](mdc:src/cognition/types.ts): Cognitive process type definitions

**Usage Pattern**:
```typescript
import { BaseModelRunner } from '../cognition/runner';
import { ModelDetails } from '../cognition/models';

const runner = new BaseModelRunner(modelDetails);
const response = await runner.execute(prompt);
```

### 2. Interaction (`src/interaction/`)
**Definition**: Model-environment interactions (formerly "conversation")
**Purpose**: Represents the dynamic exchange between models and their environment

**Key Components**:
- [src/interaction/interaction.ts](mdc:src/interaction/interaction.ts): Core interaction management
- [src/interaction/stimulus.ts](mdc:src/interaction/stimulus.ts): Stimulus processing within interactions

**Usage Pattern**:
```typescript
import { Interaction } from '../interaction/interaction';

const interaction = new Interaction(modelDetails, systemPrompt);
interaction.addStimulus(new Stimulus(prompt));
const response = await interaction.execute();
```

### 3. Stimulus (`src/stimulus/`)
**Definition**: Input that triggers cognitive response (formerly "prompt")
**Purpose**: Represents environmental inputs that provoke cognitive processing

**Key Components**:
- [src/stimulus/stimulus.ts](mdc:src/stimulus/stimulus.ts): Core stimulus processing
- [src/stimulus/tools/](mdc:src/stimulus/tools/): Tool integration for stimulus enhancement

**Usage Pattern**:
```typescript
import { Stimulus } from '../stimulus/stimulus';

const stimulus = new Stimulus(content, options);
const enhancedStimulus = stimulus.withTools(['calculator', 'web-search']);
```

### 4. Umwelt
**Definition**: The perceptual world model operates within
**Purpose**: The complete environment and context that shapes model perception and behavior

## Naming Convention Rules

### 1. Semantic Clarity
- Use terms that reflect cognitive processes
- Avoid generic technical terms when semantic alternatives exist
- Maintain consistency across the codebase

### 2. File and Directory Naming
```
src/
├── cognition/          # Cognitive processes and model interfaces
├── interaction/        # Model-environment interactions
├── stimulus/           # Environmental inputs and triggers
├── memory/             # Memory and knowledge storage
├── evaluation/         # Assessment and scoring
└── providers/          # External service connections
```

### 3. Class and Interface Naming
```typescript
// Cognitive components
class BaseModelRunner {}           // Core cognitive execution
class SmartModelRunner {}          // Enhanced cognitive processing
class MemoryRunner {}              // Memory-augmented cognition

// Interaction components
class Interaction {}               // Model-environment exchange
class InteractionManager {}        // Interaction orchestration

// Stimulus components
class Stimulus {}                  // Environmental input
class StimulusProcessor {}         // Input processing
class StimulusEnhancer {}          // Input enhancement
```

### 4. Method Naming
```typescript
// Cognitive methods
async execute() {}                 // Perform cognitive processing
async generate() {}                // Generate cognitive output
async process() {}                 // Process cognitive input

// Interaction methods
async interact() {}                // Perform interaction
async respond() {}                 // Generate response
async exchange() {}                // Exchange information

// Stimulus methods
async process() {}                 // Process stimulus
async enhance() {}                 // Enhance stimulus
async validate() {}                // Validate stimulus
```

## Migration from Old Naming

### Completed Renaming
- `src/models/` → `src/cognition/`
- `src/conversation/` → `src/interaction/`
- `Conversation` class → `Interaction` class
- `prompt.ts` → `stimulus.ts`
- `Prompt` class → `Stimulus` class

### Import Path Updates
```typescript
// Old imports (deprecated)
import { Conversation } from '../conversation/conversation';
import { Prompt } from '../models/prompt';

// New imports (current)
import { Interaction } from '../interaction/interaction';
import { Stimulus } from '../stimulus/stimulus';
```

## Semantic Relationships

### Cognitive Flow
```
Stimulus → Cognition → Response
   ↓         ↓          ↓
Input → Processing → Output
```

### Interaction Flow
```
Environment → Stimulus → Interaction → Cognition → Response → Environment
     ↓           ↓           ↓           ↓          ↓           ↓
   Context →   Input →   Exchange →  Process →   Output →   Feedback
```

### Memory Integration
```
Stimulus → Memory → Cognition → Memory → Response
   ↓        ↓         ↓         ↓         ↓
Input →  Retrieve → Process → Store → Output
```

## Implementation Guidelines

### 1. Maintain Semantic Consistency
- Use semantic terms consistently across all files
- Avoid mixing old and new naming conventions
- Update documentation to reflect semantic concepts

### 2. Preserve Functionality
- Ensure all existing functionality continues to work
- Maintain backward compatibility where possible
- Update tests to use new naming conventions

### 3. Update Documentation
- Reflect semantic concepts in all documentation
- Update README files and comments
- Maintain clear explanations of semantic relationships

### 4. Test Coverage
- Ensure all tests use new naming conventions
- Verify semantic relationships work correctly
- Test integration between semantic components

## Benefits of Semantic Architecture

### 1. Conceptual Clarity
- Clear separation of cognitive processes
- Intuitive understanding of component relationships
- Better alignment with AI/ML concepts

### 2. Maintainability
- Easier to understand and modify
- Clear component responsibilities
- Reduced cognitive load for developers

### 3. Extensibility
- Natural extension points for new features
- Clear integration patterns
- Scalable architecture

### 4. Documentation
- Self-documenting code structure
- Clear component purposes
- Intuitive API design

## Future Considerations

### 1. Additional Semantic Concepts
- **Perception**: How models interpret stimuli
- **Attention**: Focus mechanisms for processing
- **Learning**: Adaptation and improvement processes
- **Reasoning**: Logical and analytical processes

### 2. Semantic Extensions
- **Multi-modal Cognition**: Visual, auditory, and textual processing
- **Temporal Cognition**: Time-aware processing and memory
- **Spatial Cognition**: Spatial reasoning and navigation
- **Social Cognition**: Interaction with multiple agents

### 3. Integration Patterns
- **Cognitive Pipelines**: Sequential processing chains
- **Parallel Cognition**: Concurrent processing streams
- **Hierarchical Cognition**: Nested processing levels
- **Distributed Cognition**: Multi-agent cognitive systems

## Validation Checklist

### Semantic Consistency
- [ ] All files use semantic naming conventions
- [ ] Import paths reflect semantic structure
- [ ] Class names align with semantic concepts
- [ ] Method names follow semantic patterns

### Functionality Preservation
- [ ] All existing functionality works correctly
- [ ] Tests pass with new naming conventions
- [ ] CLI commands function as expected
- [ ] Integration points work properly

### Documentation Updates
- [ ] README files updated with semantic concepts
- [ ] Code comments reflect semantic architecture
- [ ] API documentation uses semantic terms
- [ ] Examples demonstrate semantic relationships

### Future Readiness
- [ ] Architecture supports semantic extensions
- [ ] Clear patterns for new semantic concepts
- [ ] Integration points for additional components
- [ ] Scalable semantic framework
