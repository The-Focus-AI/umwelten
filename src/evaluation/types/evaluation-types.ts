import { ModelDetails, ModelResponse } from '../../cognition/types.js';

/**
 * Base interface for all evaluation strategies
 */
export interface EvaluationStrategy {
  /**
   * Run the evaluation and return results
   */
  run(): Promise<EvaluationResult[]>;
}

/**
 * Result of evaluating a single model with a stimulus
 */
export interface EvaluationResult {
  /** Model that was evaluated */
  model: ModelDetails;
  /** Response generated by the model */
  response: ModelResponse;
  /** Metadata about the evaluation */
  metadata: EvaluationMetadata;
}

/**
 * Metadata about an evaluation run
 */
export interface EvaluationMetadata {
  /** Unique identifier for the stimulus being tested */
  stimulusId: string;
  /** Unique identifier for this evaluation run */
  evaluationId: string;
  /** When the evaluation was run */
  timestamp: Date;
  /** How long the evaluation took in milliseconds */
  duration: number;
  /** Whether this result was served from cache */
  cached: boolean;
  /** Additional metadata specific to the evaluation strategy */
  strategy?: string;
  /** Any errors that occurred during evaluation */
  error?: string;
}

/**
 * Configuration for evaluation strategies
 */
export interface EvaluationConfig {
  /** Unique identifier for this evaluation run */
  evaluationId: string;
  /** Whether to use caching (default: true) */
  useCache?: boolean;
  /** Whether to run evaluations concurrently (default: false) */
  concurrent?: boolean;
  /** Maximum number of concurrent evaluations (default: 3) */
  maxConcurrency?: number;
  /** Whether to resume from existing results (default: true) */
  resume?: boolean;
  /** Whether to show progress updates (default: true) */
  showProgress?: boolean;
}

/**
 * Progress update for evaluation runs
 */
export interface EvaluationProgress {
  /** Name of the model being evaluated */
  modelName: string;
  /** Current status of the evaluation */
  status: 'starting' | 'in-progress' | 'completed' | 'error';
  /** Content of the response (for streaming) */
  content?: string;
  /** Metadata about the response */
  metadata?: any;
  /** Error message if status is 'error' */
  error?: string;
}

/**
 * Callback function for progress updates
 */
export type ProgressCallback = (progress: EvaluationProgress) => void;

/**
 * Result of running a complete evaluation
 */
export interface EvaluationRunResult {
  /** Unique identifier for this evaluation run */
  evaluationId: string;
  /** Directory where results are stored */
  outputDir: string;
  /** Results for each model evaluated */
  results: EvaluationResult[];
  /** Statistics about the evaluation run */
  stats: EvaluationRunStats;
}

/**
 * Statistics about an evaluation run
 */
export interface EvaluationRunStats {
  /** Total number of models evaluated */
  totalModels: number;
  /** Number of successful evaluations */
  successfulModels: number;
  /** Number of failed evaluations */
  failedModels: number;
  /** Total time taken in milliseconds */
  totalDuration: number;
  /** Average time per model in milliseconds */
  averageDuration: number;
  /** Cache hit rate (0-1) */
  cacheHitRate: number;
  /** Total cost of all API calls */
  totalCost: number;
}

/**
 * Configuration for stimulus-based evaluations
 */
export interface StimulusEvaluationConfig extends EvaluationConfig {
  /** The stimulus to evaluate */
  stimulusId: string;
  /** Models to evaluate against the stimulus */
  models: ModelDetails[];
  /** Additional configuration for the stimulus */
  stimulusConfig?: Record<string, any>;
}

/**
 * Result of a stimulus-based evaluation
 */
export interface StimulusEvaluationResult extends EvaluationRunResult {
  /** The stimulus that was evaluated */
  stimulusId: string;
  /** Configuration used for the stimulus */
  stimulusConfig?: Record<string, any>;
}
